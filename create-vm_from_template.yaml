---
- hosts: localhost
  tasks:
    
    - name: collect a list of the datacenters
      vmware.vmware_rest.vcenter_datacenter_info:
      register: my_datacenters
    - name: Build a list of all the clusters
      vmware.vmware_rest.vcenter_cluster_info:
      register: all_the_clusters
    - name: debug all_the_clusters
      debug:
        var: all_the_clusters 
    - name: Set cluster_from_name
      set_fact:
        cluster_from_name: "{{ all_the_clusters.value | selectattr('name', 'equalto', 'cluster1')|first }}"  
    - name: debug cluster_from_name
      debug:
        var: cluster_from_name     
    - name: Retrieve details about the first cluster
      vmware.vmware_rest.vcenter_cluster_info:
        cluster: "{{ all_the_clusters.value[0].cluster }}"
      register: my_cluster_info
    - name: Retrieve a list of all the datastores
      vmware.vmware_rest.vcenter_datastore_info:
        filter_names:
        - Datastore
      register: my_datastores
    - name: Set my_datastore
      set_fact:
         my_datastore: '{{ my_datastores.value|first }}'  
    - name: Build a list of all the folders
      vmware.vmware_rest.vcenter_folder_info:
      register: my_folders
    - name: Build a list of all the folders with the type VIRTUAL_MACHINE and called vm
      vmware.vmware_rest.vcenter_folder_info:
        filter_type: VIRTUAL_MACHINE
        filter_names:
          - test
      register: my_folders   
    - name: Set my_virtual_machine_folder
      set_fact:
        my_virtual_machine_folder: '{{ my_folders.value|first }}'


    - name: Look up the VM called test_vm1 in the inventory
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
        - bastion
      register: search_result

    - name: Collect information about a specific VM
      vmware.vmware_rest.vcenter_vm_info:
        vm: '{{ search_result.value[0].vm }}'
      register: test_vm1_info
    - name: debug test_vm1_info
      debug:
        var: test_vm1_info
        
    - name: List all Local Content Library
      vmware.vmware_rest.content_locallibrary_info:
      register: all_content_libraries
    
    - name: Use the name to identify the right Content Library
      set_fact:
        nfs_lib: "{{ all_content_libraries.value | selectattr('name', 'equalto', 'test')|first }}"
    
    - name: Export the VM as an OVF on the library
      vmware.vmware_rest.vcenter_ovf_libraryitem:
        session_timeout: 2900
        source:
          type: VirtualMachine
          id: "{{ test_vm1_info.id }}"
        target:
          library_id: "{{ nfs_lib.id }}"
        create_spec:
          name: golden_image
          description: an OVF example
          flags: []
        state: present
        
    - name: Get the list of items of the NFS library
      vmware.vmware_rest.content_library_item_info:
        library_id: '{{ nfs_lib.id }}'
      register: lib_items
    - name: Define a new fact with the golden image ID
      ansible.builtin.set_fact:
        golden_image_id: '{{ (lib_items.value|selectattr("name", "equalto", "golden_image")|first).id }}'      
    - name: debug golden_image_id
      debug:
        var: golden_image_id
    - name: debug my_folders
      debug:
        var: my_folders
    - name: debug my_cluster_info
      debug:
        var: my_cluster_info  
    - name: Set resource pool
      set_fact:
        my_resource_pool_id: '{{ my_cluster_info.value.resource_pool}}'
    - name: debug my_resource pool
      debug:
        var: my_resource_pool_id    
    
    - name: Create a new VM based on the OVF
      vmware.vmware_rest.vcenter_ovf_libraryitem:
        ovf_library_item_id: '{{ golden_image_id }}'
        state: deploy
        target: 
          folder_id: "{{ my_virtual_machine_folder.folder }}"
          resource_pool_id: "{{ my_resource_pool_id}}"
        deployment_spec:
          name: my_vm_from_ovf
          accept_all_EULA: true
          storage_provisioning: thin    
    
         
